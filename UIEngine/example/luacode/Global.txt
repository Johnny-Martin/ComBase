
=====================Global Function In Lua=========================
rawlen: lua_objlen was renamed rawlen in version 5.2. 
		This function get the lenth of the arguement: if the arg is string, the lenth will be the string lenth; 
		if the arg is table,the lenth will be #arg; 
		if the arg is userdata,the lenth will be the buffer size of the userdata
rawget: Ignore the metamethod __index
rawset: Ignore the metamethod __newindex
rawequal: Returns 1 if the two values in acceptable indices index1 and index2 are primitively equal.
		  that is, without calling metamethods. Otherwise returns 0. 
		  Also returns 0 if any of the indices are non valid.

error:  Whenever an error occurs, Lua ends the current chunk and returns to the application.
		Errors occur when you (that is, your program) try to add values that are not numbers, 
		to call values that are not functions, to index values that are not tables, and so on. 
		You can modify this behavior using metatables, as we will see later.
		You can also explicitly raise an error calling the error function, its argument is the error message.

assert: The assert function checks whether its first argument is not false and simply returns that argument; 
		if the argument is false (that is, false or nil), assert raises an error. 
		Its second argument, the message, is optional.
print

setmetatable
getmetatable

dofile: dofile (filename),Opens the named file and executes its contents as a Lua chunk. When called without arguments, 
		dofile executes the contents of the standard input (stdin). Returns all values returned by the chunk. 
		In case of errors, dofile propagates the error to its caller (that is, dofile does not run in protected mode).

load:   load (func ,chunkname), Loads a chunk using function func to get its pieces. Each call to func must return a 
		string that concatenates with previous results. A return of an empty string, nil, or no value signals the 
		end of the chunk. 
		If there are no errors, returns the compiled chunk as a function; otherwise, returns nil plus the error message. 
		The environment of the returned function is the global environment. chunkname is used as the chunk name for 
		error messages and debug information. When absent, it defaults to "=(load)".
		
loadfile: loadfile ([filename]),Similar to load, but gets the chunk from file filename or from the standard input, 
		  if no file name is given.
require: Roughly, require does the same job as dofile, but with two important differences. 
		 First, require searches for the file in a path; 
		 second, require controls whether a file has already been run to avoid duplicating the work. 
		 Because of these features, require is the preferred function in Lua for loading libraries
		
		 The path used by require is a list of patterns, each of them specifying an alternative way 
		 to transform a virtual file name (the argument to require) into a real file name. 
		 More specifically, each component in the path is a file name containing optional interrogation marks. 
		 For each component, require replaces each `?´ by the virtual file name and checks whether there is 
		 a file with that name; if not, it goes to the next component. The components in a path are separated 
		 by semicolons (a character seldom used for file names in most operating systems). For instance, if the 
		 path(package.path) is
					?;?.lua;c:\windows\?;/usr/local/lua/?/?.lua
		then the call require"lili" will try to open the following files:
					lili
					lili.lua
					c:\windows\lili
					/usr/local/lua/lili/lili.lua
pairs
ipairs
next
unpack: return multiple arguments from a table
select: select (index, ...)If index is a number, returns all arguments after argument number index.  
					print(select(2, 1, 2, 3)) --> 2, 3
		Otherwise, index must be the string "#", and select returns the total number of extra 
		arguments it received.
					print(select("#", {1,2,3}, 4, 5, {6,7,8}) --> 4 (a table, 2 numbers, another table)
		
					function multiple_args(...)
					  local arguments = {...}  -- pack the arguments in a table
					  local argCount = select("#", ...)
					  return unpack(arguments) -- return multiple arguments from a table (unpack)
					end
					
xpcall: The xpcall (f, err) function calls the requested function and also sets the error handler. 
		Any error inside f is not propagated; instead, xpcall catches the error, calls the err function 
		with the original error object, and returns a status code.
			A simple example for xpcall:
			function myfunction ()
			   n = n/nil
			end
			function myerrorhandler( err )
			   print( "ERROR:", err )
			end
			status = xpcall( myfunction, myerrorhandler )
			print( status)

			Result:
			ERROR: test2.lua:2: attempt to perform arithmetic on global 'n' (a nil value)
			false

pcall： The pcall(f) function calls the requested function in protected mode. If some error occurs in function f, 
		it does not throw an error, It just returns the status of error.

NOTE: About pcall and xpcall
		When pcall returns its error message, it destroys part of the stack (the part that went from it to the error point). 
		Consequently, if we want a traceback, we must build it before pcall returns. To do that, Lua provides the xpcall function. 
		Besides the function to be called, it receives a second argument, an error handler function. In case of errors, 
		Lua calls that error handler before the stack unwinds, so that it can use the debug library to gather any extra 
		information it wants about the error. Two common error handlers are debug.debug, which gives you a Lua prompt 
		so that you can inspect by yourself what was going on when the error happened (later we will see more about that, 
		when we discuss the debug library); and debug.traceback, which builds an extended error message with a traceback. 
		The latter is the function that the stand-alone interpreter uses to build its error messages. You also can call 
		debug.traceback at any moment to get a traceback of the current execution:

		print(debug.traceback())
		
type
tonumber
tostring

collectgarbage: This function is a generic interface to the garbage collector. 
				It performs different functions according to its first argument, opt:

				"collect": performs a full garbage-collection cycle. This is the default option.
				"stop": stops the garbage collector.
				"restart": restarts the garbage collector.
				"count": returns the total memory in use by Lua (in Kbytes).
				"step": performs a garbage-collection step. The step "size" is controlled by arg 
						(larger values mean more steps) in a non-specified way. If you want to control 
						the step size you must experimentally tune the value of arg. Returns true if 
						the step finished a collection cycle.
				"setpause": sets arg as the new value for the pause of the collector. 
							Returns the previous value for pause.
				"setstepmul": sets arg as the new value for the step multiplier of the collector. 
							  Returns the previous value for step.

							  
=====================Global Table(Library) In Lua=========================
debug: Lua provides a debug library, which provides all the primitive functions for us to create our own debugger.
	   1. debug() Enters interactive mode for debugging, which remains active till we type in only cont in 
		  a line and press enter. User can inspect variables during this mode using other functions.
	   2. getfenv(object)Returns the environment of object.
	   3. gethook(optional thread)Returns the current hook settings of the thread, as three 
		  values − the current hook function, the current hook mask, and the current hook count.
	   4. getinfo(optional thread, function or stack level, optional flag)Returns a table with info about a function. 
	      You can give the function directly, or you can give a number as the value of function, which means the 
		  function running at level function of the call stack of the given thread − level 0 is the current 
		  function (getinfo itself); level 1 is the function that called getinfo; and so on. If function is 
		  a number larger than the number of active functions, then getinfo returns nil.
	   5. getlocal(optional thread, stack level, local index)Returns the name and the value of the local variable
	      with index local of the function at level of the stack.Returns nil if there is no local variable with the 
	      given index, and raises an error when called with a level out of range.
	   6. getmetatable(value)Returns the metatable of the given object or nil if it does not have a metatable.
	   7. getregistry()Returns the registry table,a pre-defined table that can be used by any C code to store whatever 
	      Lua value it needs to store.
	   8. getupvalue(function, upvalue index)This function returns the name and the value of the upvalue with index up 
	      of the function func. The function returns nil if there is no upvalue with the given index.
	   9. setfenv(function or thread or userdata, environment table)Sets the environment of the given object to the 
	      given table. Returns object.
	   10.sethook(optional thread, hook function, hook mask string with "c" and/or "r" and/or "l", optional instruction
	      count)Sets the given function as a hook. The string mask and the number count describes when the hook will be called.
	      Here, c, r and l are called every time Lua calls, returns, and enters every line of code in a function respectively.
	   11.setlocal(optional thread, stack level, local index, value)Assigns the value to the local variable with index 
	      local of the function at level of the stack. The function returns nil if there is no local variable with the given 
	      index, and raises an error when called with a level out of range. Otherwise, it returns the name of the local variable. 
	   12.setmetatable(value, metatable)Sets the metatable for the given object to the given table (which can be nil).
	   13.setupvalue(function, upvalue index, value)This function assigns the value to the upvalue with index up of 
	      the function func. The function returns nil if there is no upvalue with the given index. Otherwise, it returns 
	      the name of the upvalue.
	   14.traceback(optional thread, optional message string, optional level argument)Builds an extended error message 
	      with a traceback.


table: 1,table.concat (table [, sep [, i [, j]]])Concatenates the strings in the tables based on the parameters given. See example for detail.
	   2,table.insert (table, [pos,] value)Inserts a value into the table at specified position.
	   3,table.maxn (table)Returns the largest numeric index.
	   4,table.remove (table [, pos])Removes the value from the table.
	   5,table.sort (table [, comp])Sorts the table based on optional comparator argument.
	   6,table.getn(table)
	   7,table.setn(table) this two functions are some kind of weird......
	   
				print(table.getn{10,2,nil})        --> 2
				print(table.getn{10,2,nil; n=5})   --> 5
				a = {n=10}
				print(table.getn(a))               --> 10
				table.setn(a, 10000)
				print(table.getn(a))               --> 10000
				
string: 1,string.upper(argument)Returns a capitalized representation of the argument.
		2,string.lower(argument)Returns a lower case representation of the argument.
		3,string.gsub(mainString,findString,replaceString)Returns a string by replacing 
		  occurrences of findString with replaceString.
		4,string.strfind(mainString,findString,optionalStartIndex,optionalEndIndex)
		  Returns the start index and end index of the findString in the main string 
		  and nil if not found.
		5,string.reverse(arg)Returns a string by reversing the characters of the passed string.
		6,string.format(...)Returns a formatted string.
		7,string.char(arg) and string.byte(arg)Returns internal numeric and character 
			representations of input argument.
		8,string.len(arg)Returns a length of the passed string.
		9,string.rep(string, n))Returns a string by repeating the same string n number times.
		10,..Thus operator concatenates two strings.
		11,string.match
		12,string.gmatch
		13,string.find
		14,string.sub
		15,string.gsub

math:   1.  math.abs  (x)Returns the absolute value of x.
		2.	math.acos (x)Returns the arc cosine of x (in radians).
		3.	math.asin (x)Returns the arc sine of x (in radians).
		4.	math.atan (x)Returns the arc tangent of x (in radians).
		5.	math.atan2 (y, x)Returns the arc tangent of y/x (in radians), 
			but uses the signs of both parameters to find the quadrant of the result. 
			(It also handles correctly the case of x being zero.)
		6.	math.ceil (x)Returns the smallest integer larger than or equal to x.
		7.	math.cos (x)Returns the cosine of x (assumed to be in radians).
		8.	math.cosh (x)Returns the hyperbolic cosine of x.
		9.	math.deg (x)Returns the angle x (given in radians) in degrees.
		10.	math.exp (x)Returns the value e power x.
		11.	math.floor (x)Returns the largest integer smaller than or equal to x.
		12.	math.fmod (x, y)Returns the remainder of the division of x by y that 
			rounds the quotient towards zero.
		13.	math.frexp (x)Returns m and e such that x = m2e, e is an integer and 
			the absolute value of m is in the range [0.5, 1) (or zero when x is zero).
		14.	math.huge The value HUGE_VAL, a value larger than or equal to any other numerical valu.
		15.	math.ldexp (m, e)Returns m2e (e should be an integer).
		16.	math.log (x)Returns the natural logarithm of x.
		17.	math.log10 (x)Returns the base-10 logarithm of x.
		18.	math.max (x, ...)Returns the maximum value among its arguments.
		19.	math.min (x, ...)Returns the minimum value among its arguments.
		20.	math.modf (x)Returns two numbers, the integral part of x and the fractional part of x.
		21.	math.pi The value of pi.
		22.	math.pow (x, y)Returns xy. (You can also use the expression x^y to compute this value.)
		23.	math.rad (x)Returns the angle x (given in degrees) in radians.
		24.	math.random ([m [, n]])This function is an interface to the simple pseudo-random generator 
			function rand provided by ANSI C.When called without arguments, returns a uniform pseudo-random 
			real number in the range [0,1). When called with an integer number m, math.random returns a 
			uniform pseudo-random integer in the range [1, m]. When called with two integer numbers m and n, 
			math.random returns a uniform pseudo-random integer in the range [m, n].
		25.	math.randomseed (x)Sets x as the "seed" for the pseudo-random generator: equal seeds produce 
			equal sequences of numbers.
		26.	math.sin (x)Returns the sine of x (assumed to be in radians).
		27.	math.sinh (x)Returns the hyperbolic sine of x.
		28.	math.sqrt (x)Returns the square root of x. (You can also use the expression x^0.5 to compute this value.)
		29.	math.tan (x)Returns the tangent of x (assumed to be in radians).
		30.	math.tanh (x)Returns the hyperbolic tangent of x.

os:     1.	os.clock ()Returns an approximation of the amount in seconds of CPU time used by the program.
		2.	os.date ([format [, time]])Returns a string or a table containing date and time, formatted according to t
			he given string format.
		3.	os.difftime (t2, t1)Returns the number of seconds from time t1 to time t2. In POSIX, Windows, and some 
			other systems, this value is exactly t2-t1.
		4.	os.execute ([command])This function is equivalent to the ANSI C function system. It passes command to 
			be executed by an operating system shell. Its first result is true if the command terminated successfully, 
			or nil otherwise.
		5.	os.exit ([code [, close])Calls the ANSI C function exit to terminate the host program. If code is true, 
			the returned status is EXIT_SUCCESS; if code is false, the returned status is EXIT_FAILURE; 
			if code is a number, the returned status is this number.
		6.	os.getenv (varname)Returns the value of the process environment variable varname, or nil if the 
			variable is not defined.
		7.	os.remove (filename)Deletes the file (or empty directory, on POSIX systems) with the given name. 
			If this function fails, it returns nil, plus a string describing the error and the error code.
		8.	os.rename (oldname, newname)Renames file or directory named oldname to newname. If this function fails, 
			it returns nil, plus a string describing the error and the error code.
		9.	os.setlocale (locale [, category])Sets the current locale of the program. locale is a system-dependent 
			string specifying a locale; category is an optional string describing which category to change:
			"all", "collate", "ctype", "monetary", "numeric", or "time"; the default category is "all". 
			The function returns the name of the new locale, or nil if the request cannot be honored.
		10.	os.time ([table])Returns the current time when called without arguments, or a time representing 
			the date and time specified by the given table. This table must have fields year, month, 
			and day, and may have fields hour (default is 12), min (default is 0), sec (default is 0), 
			and isdst (default is nil). For a description of these fields, see the os.date function.
		11.	os.tmpname ()Returns a string with a file name that can be used for a temporary file. The file must 
			be explicitly opened before its use and explicitly removed when no longer needed.
io:     1.  io.open(filename [, mode])
				"r"		Read-only mode and is the default mode where an existing file is opened.
				"w"		Write enabled mode that overwrites the existing file or creates a new file.
				"a"		Append mode that opens an existing file or creates a new file for appending.
				"r+"	Read and write mode for an existing file.
				"w+"	All existing data is removed if file exists or new file is created with read write permissions.
				"a+"	Append mode with read mode enabled that opens an existing file or creates a new file.
		2.	io.input(file) sets the default input file
		3.	io.output(file) sets the default output file
		4.	io.close(file) closes the open file
		5.  io.tmpfile() − Returns a temporary file for reading and writing that will be removed once the program quits.
		6.	io.type(file) − Returns whether file, closed file or nil based on the input file.
		7.	io.flush() − Clears the default output buffer.
		8.	io.lines(optional file name) − Provides a generic for loop iterator that loops through the file and closes 
			the file in the end, in case the file name is provided or the default file is used and not closed in the 
			end of the loop.
utf8
coroutine
package
_G
_VERSION(Lua 5.3)

=====================All Metamethods In Lua====================== 
__add(a, b) 		--加法
__sub(a, b) 		--减法
__mul(a, b) 		--乘法
__div(a, b)			--除法
__mod(a, b) 		--取模
__pow(a, b) 		--乘幂
__unm(a) 			--相反数
__concat(a, b) 		--连接
__len(a) 			--长度
__eq(a, b) 			--相等
__lt(a, b) 			--小于
__le(a, b) 			--小于等于
__index(a, b) 		--索引查询
__newindex(a, b, c) --索引更新(赋值)
__call(a, ...) 		--方法调用
__tostring(a) 		--字符串输出
__metatable 		--保护元表